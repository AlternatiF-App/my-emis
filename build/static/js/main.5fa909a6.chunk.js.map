{"version":3,"sources":["assets/img/bullhorn.png","assets/img/kemenag.png","components/Signin.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Signin","className","src","bullhorn","logo","id","type","for","class","name","Component","Routing","exact","path","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"4FAAAA,EAAOC,QAAU,IAA0B,sC,mBCA3CD,EAAOC,QAAU,IAA0B,qC,wMCKtBC,E,uKAEb,OACI,yBAAKC,UAAU,eACV,yBAAKA,UAAU,WACd,yBAAKA,UAAU,OACb,yBAAKA,UAAU,cACb,yBAAKA,UAAU,SACb,yBAAKA,UAAU,gBACb,yBAAKA,UAAU,aACb,yBAAKC,IAAKC,IAAUF,UAAU,aAFlC,eAMA,6BACE,2GAIN,yBAAKA,UAAU,cACb,yBAAKA,UAAU,SACb,yBAAKA,UAAU,kBACb,yBAAKA,UAAU,cAAcC,IAAKE,OAEpC,6CACA,2EACA,yBAAKH,UAAU,sBACb,uBAAGA,UAAU,yBAAb,kBACA,2BAAOI,GAAG,cAAcC,KAAK,OAAOL,UAAU,aAC9C,2BAAOM,IAAI,eAAX,kBAEF,yBAAKN,UAAU,sBACb,uBAAGA,UAAU,yBAAb,gBACA,2BAAOI,GAAG,cAAcC,KAAK,OAAOE,MAAM,aAC1C,2BAAOD,IAAI,eAAX,eAEF,yBAAKN,UAAU,sBACb,4BAAQA,UAAU,8CAA8CK,KAAK,SAASG,KAAK,UAAnF,QACE,uBAAGR,UAAU,wBAAb,mB,GAtCQS,aCA9BC,EAAU,WAEd,OACE,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,KAChB,kBAAC,EAAD,SAcKC,MARf,WACE,OACE,kBAAC,IAAD,KACE,kBAAC,EAAD,QCPcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.5fa909a6.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/bullhorn.3b79cbe5.png\";","module.exports = __webpack_public_path__ + \"static/media/kemenag.b462b754.png\";","import React, { Component } from 'react'\r\nimport '../App.css'\r\nimport bullhorn from '../assets/img/bullhorn.png'\r\nimport logo from '../assets/img/kemenag.png'\r\n\r\nexport default class Signin extends Component {\r\n    render() {\r\n        return (\r\n            <div className=\"container-1\">\r\n                 <div className=\"section\">\r\n                  <div className=\"row\">\r\n                    <div className=\"col s12 m6\">\r\n                      <div className=\"row-1\">\r\n                        <div className=\"content-info\">\r\n                          <div className=\"img-style\">\r\n                            <img src={bullhorn} className=\"ic-info\"/>\r\n                          </div>\r\n                          Pengumuman!\r\n                        </div>\r\n                        <div>\r\n                          <p>Tanggal Pendataan 2020-02-10 s/d 2020-05-31 untuk jenjang MA, MTS, MI, RA</p>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                    <div className=\"col s12 m6\">\r\n                      <div className=\"row-2\">\r\n                        <div className=\"content-signin\">\r\n                          <img className=\"logo-signin\" src={logo}/>\r\n                        </div>\r\n                        <h3>Emis Madrasah</h3>\r\n                        <p>Silakan masukan Nama Pengguna dan Kata Sandi</p>\r\n                        <div className=\"input-field col s6\">\r\n                          <i className=\"material-icons prefix\">account_circle</i>\r\n                          <input id=\"icon_prefix\" type=\"text\" className=\"validate\"/>\r\n                          <label for=\"icon_prefix\">Nama Pengguna</label>\r\n                        </div>\r\n                        <div className=\"input-field col s6\">\r\n                          <i className=\"material-icons prefix\">lock_outline</i>\r\n                          <input id=\"icon_prefix\" type=\"text\" class=\"validate\"/>\r\n                          <label for=\"icon_prefix\">Kata Sandi</label>\r\n                        </div>\r\n                        <div className=\"input-field col s6\">\r\n                          <button className=\"btn waves-effect btn-masuk waves-light blue\" type=\"submit\" name=\"action\">MASUK\r\n                            <i className=\"material-icons right\">send</i>\r\n                          </button>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                  </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React from 'react';\r\nimport \"./App.css\"\r\nimport {BrowserRouter,  Route, Switch} from 'react-router-dom'\r\nimport Signin from \"./components/Signin\"\r\n\r\nconst Routing = () => {\r\n  \r\n  return (\r\n    <Switch>\r\n        <Route exact path=\"/\">\r\n          <Signin />\r\n        </Route>\r\n      </Switch>\r\n  )\r\n}\r\n\r\nfunction App() {\r\n  return (\r\n    <BrowserRouter>\r\n      <Routing />\r\n    </BrowserRouter>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './App.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}